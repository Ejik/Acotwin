//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Foundational Module" recipe.
//
// The Module class derives from the CAB base class ModuleInit and it will be instantiated
// when the module is loaded by the CAB infrastructure.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-270-Creating%20a%20Module.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Services;
using Microsoft.Practices.ObjectBuilder;
using ACOT.Exchange1Cv8Module.Constants;
using Microsoft.Practices.CompositeUI.EventBroker;
using ACOT.Infrastructure.Interface;
using ACOT.Exchange1Cv8Module.Interface;
using System.Windows.Forms;

namespace ACOT.Exchange1Cv8Module
{
    public class Module : ModuleInit
    {        
        private WorkItem _rootWorkItem;

        [InjectionConstructor]
        public Module([ServiceDependency] WorkItem rootWorkItem)
        {
            _rootWorkItem = rootWorkItem;
        }

        public override void Load()
        {
            base.Load();

            // NOTE: 
            // The layout view in this module defines the layout of the shell. To do this, it
            // loads its view into a shell Workspace named "LayoutWorkspace". If the shell does 
            // not contain a Workspace with this name, the module will throw a ModuleLoadException exception. 
            // 
            // If you see this exception, you can modify the ShowLayoutView method to use a Workspace 
            // name available in shell, or change the name of a Workspace in the shell to "LayoutWorkspace".
            //ShowLayoutView();
        }

        private void ShowLayoutView()
        {
            if (_rootWorkItem.Workspaces.Contains(WorkspaceNames.MdiWindows))
            {
                LayoutView layout = _rootWorkItem.Items.AddNew<LayoutView>(WorkspaceNames.Exchange1Cv8ModuleLayout);
                _rootWorkItem.Workspaces[WorkspaceNames.MdiWindows].Show(layout);
            }
            else
                throw new ModuleLoadException("ModalWorkspace not found");
        }

        //[EventSubscription(EventTopicNames.Exchange1Cv8Show, ThreadOption.UserInterface)]
        //public void Exchange1Cv8ModuleClickHandler(object sender, EventArgs<string> e)
        //{
        //    const string workItemID = "Exchange1Cv8Process";
        //    LayoutView workItem;
        //    if (_rootWorkItem.Items.Contains(workItemID))
        //    {
        //        workItem = (LayoutView)_rootWorkItem.Items[workItemID];           
        //    }
        //    else
        //    {
        //        workItem = _rootWorkItem.Items.AddNew<LayoutView>(workItemID);
        //        MDIWindowWorkspace ws = (MDIWindowWorkspace)_rootWorkItem.Workspaces[WorkspaceNames.MdiWindows];
        //        ws.OnClosing += new System.Windows.Forms.FormClosingEventHandler(workItem.Layout_OnClosing);
        //    }
                                                    
        //    _rootWorkItem.Workspaces[WorkspaceNames.MdiWindows].Show(workItem);                       
        //}        
    }
}
