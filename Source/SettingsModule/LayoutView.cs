//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Foundational Module" recipe.
//
// The LayoutView usercontrol defines a layout decoupled from the shell. 
// It provides a left and right workspace, menu bar, tool bar and status bar.
// These ui elements are added as extension sites.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-290-Automation%20Add%20Foundational%20Module.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Text;
using System.Windows.Forms;
using ACOT.Infrastructure.Interface.Constants;
using Microsoft.Practices.ObjectBuilder;
using System.Drawing;
using Microsoft.Practices.CompositeUI.SmartParts;
using ACOT.Infrastructure.Interface;

namespace ACOT.SettingsModule
{
    public partial class LayoutView : UserControl, ISmartPartInfoProvider
    {
        private LayoutViewPresenter _presenter;
        private Font _font;

        public Font defaultFont
        {
            get { return this._font; }
            set
            {
                this._font = value;
                OnDefaultFontChanged(value);
            }
        }

        private void OnDefaultFontChanged(Font value)
        {
            this._shellFontTextBox.Font = value;
            this._shellFontTextBox.Text = value.SizeInPoints + " пт " + value.Name;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="T:LayoutView"/> class.
        /// </summary>
        public LayoutView()
        {
            InitializeComponent();
            //this._moduleWorkspace.Name = WorkspaceNames.Module1Layout;

        }

        internal TextBox desktopTextBox
        {
            get { return this._desktopTextBox; }
        }

        internal CheckBox TreeCheckBox
        {
            get { return this._showTreeCheckBox; }
        }

        internal TextBox acotFolderPath
        {
            get { return this._acotFolderPathTextBox; }
        }

        /// <summary>
        /// Sets the presenter.
        /// </summary>
        /// <value>The presenter.</value>
        [CreateNew]
        public LayoutViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        private void selectFontBtn_Click(object sender, EventArgs e)
        {
            fontDialog.Font = this.defaultFont;
            if (fontDialog.ShowDialog() == DialogResult.OK)
            {
                this.defaultFont = this.fontDialog.Font; 
            }
        }

        private void selDesktopBtn_Click(object sender, EventArgs e)
        {
            this.openFileDialog.FileName = _desktopTextBox.Text;
            if (this.openFileDialog.FileName == "")
                this.openFileDialog.InitialDirectory = Application.StartupPath + "\\Desktop\\";
            string startupDir = System.IO.Directory.GetCurrentDirectory();
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                _desktopTextBox.Text = openFileDialog.FileName;
                System.IO.Directory.SetCurrentDirectory(startupDir);
            }
        }

        private void selAcotPathBtn_Click(object sender, EventArgs e)
        {
            this.folderBrowserDialog.SelectedPath = _acotFolderPathTextBox.Text;            
            if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
            {
                _acotFolderPathTextBox.Text = folderBrowserDialog.SelectedPath;                
            }
        }     

        #region ISmartPartInfoProvider Members

        ISmartPartInfo ISmartPartInfoProvider.GetSmartPartInfo(Type smartPartInfoType)
        {
            ISmartPartInfo spi;
            if (smartPartInfoType.IsAssignableFrom(typeof(ACOT.Infrastructure.Interface.WindowSmartPartInfo)))
            {
                WindowSmartPartInfo LayoutView = new WindowSmartPartInfo();
                LayoutView.Modal = true;
                LayoutView.MinimizeBox = false;
                LayoutView.MaximizeBox = false;
                LayoutView.ControlBox = true;

                LayoutView.Keys[WindowWorkspaceSetting.FormBorderStyle] = FormBorderStyle.FixedDialog;
                LayoutView.Keys[WindowWorkspaceSetting.AcceptButton] = this._oKbtn;
                LayoutView.Keys[WindowWorkspaceSetting.CancelButton] = this._cancelBtn;
                LayoutView.Keys[WindowWorkspaceSetting.FormShowIcon] = false;
                LayoutView.Keys[WindowWorkspaceSetting.StartPosition] = FormStartPosition.CenterParent;
                LayoutView.Keys[WindowWorkspaceSetting.AutoSize] = true;


                spi = LayoutView;
            }
            else
            {
                spi = Activator.CreateInstance(smartPartInfoType) as ISmartPartInfo;
            }

            //spi.Description = Properties.Resources.FindCustomerResultsViewDescription;
            spi.Title = "Настройки";

            return spi;
        }

        #endregion

        private void _oKbtn_Click(object sender, EventArgs e)
        {
            _presenter.OnOK();
        }

        private void _cancelBtn_Click(object sender, EventArgs e)
        {
            _presenter.OnCancel(); 
        }
        
    }
}
