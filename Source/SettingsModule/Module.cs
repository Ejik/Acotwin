//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Foundational Module" recipe.
//
// The Module class derives from the CAB base class ModuleInit and it will be instantiated
// when the module is loaded by the CAB infrastructure.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-270-Creating%20a%20Module.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Services;
using Microsoft.Practices.ObjectBuilder;
using ACOT.Infrastructure.Interface.Constants;
using Microsoft.Practices.CompositeUI.EventBroker;
using ACOT.Infrastructure.Interface;
using ACOT.Infrastructure.Interface.Services;
using System;
using System.Windows.Forms;

namespace ACOT.SettingsModule
{
    public class Module : ModuleInit
    {
        private WorkItem _rootWorkItem;

        [InjectionConstructor]
        public Module([ServiceDependency] WorkItem rootWorkItem)
        {
            _rootWorkItem = rootWorkItem;
        }

        public override void Load()
        {
            base.Load();

            // NOTE: 
            // The layout view in this module defines the layout of the shell. To do this, it
            // loads its view into a shell Workspace named "LayoutWorkspace". If the shell does 
            // not contain a Workspace with this name, the module will throw a ModuleLoadException exception. 
            // 
            // If you see this exception, you can modify the ShowLayoutView method to use a Workspace 
            // name available in shell, or change the name of a Workspace in the shell to "LayoutWorkspace".
            //ShowLayoutView();
        }

        [EventSubscription(EventTopicNames.SettingDlgShow, Thread = ThreadOption.UserInterface)]
        public void ShowLayoutView(object sender, EventArgs<string> e)
        {
            const string workItemID = "SettingsDlg";
            ACOT.SettingsModule.LayoutView workItem;
            if (_rootWorkItem.Items.Contains(workItemID))
                workItem = (ACOT.SettingsModule.LayoutView)_rootWorkItem.Items[workItemID];
            else
                workItem = _rootWorkItem.Items.AddNew<ACOT.SettingsModule.LayoutView>(workItemID);
            try
            {
                IContextService context = _rootWorkItem.Services.Get<IContextService>();
                workItem.defaultFont = context.Font;

                //helpPathTextBox.Text = Settings.Default.HelpFile;
                workItem.desktopTextBox.Text = context.desktop;
                
                workItem.TreeCheckBox.Checked = context.menuTreeVisible;
                workItem.acotFolderPath.Text = context.startupDir;

                _rootWorkItem.Workspaces[WorkspaceNames.ModalWindows].Show(workItem);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }                        
        }        
    }
}
