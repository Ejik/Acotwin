//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-030-Model%20View%20Presenter%20%20MVP%20.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using ACOT.Infrastructure.Interface.Services;
using ACOT.Infrastructure.Interface;
using ACOT.Infrastructure.Interface.Constants;
using System.Drawing;

namespace ACOT.ReadOrgModule
{
    [SmartPart]
    public partial class LayoutView : UserControl, ISmartPartInfoProvider
    {        
        public LayoutView()
        {
            InitializeComponent();              
        }

        /// <summary>
        /// Sets the presenter. The dependency injection system will automatically
        /// create a new presenter for you.
        /// </summary>
        [CreateNew]
        public LayoutViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();            
            this.orgsGrid.ColumnHeadersHeight = Convert.ToInt32(this.Font.Size) * 2 + 5;
            this.orgsGrid.ClearSelection();
            this._presenter.updateView("");
        }        

        #region ISmartPartInfoProvider Members

        public ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
        {
            ISmartPartInfo spi;
            if (smartPartInfoType.IsAssignableFrom(typeof(ACOT.Infrastructure.Interface.WindowSmartPartInfo)))
            {
                WindowSmartPartInfo wspi = new WindowSmartPartInfo();
                wspi.Modal = true;
                wspi.MinimizeBox = false;
                wspi.MaximizeBox = false;
                wspi.ControlBox = false;
                
                wspi.Keys[WindowWorkspaceSetting.FormBorderStyle] = FormBorderStyle.FixedDialog;
                wspi.Keys[WindowWorkspaceSetting.AcceptButton] = oKBtn;
                wspi.Keys[WindowWorkspaceSetting.CancelButton] = cancelBtn;
                wspi.Keys[WindowWorkspaceSetting.FormShowIcon] = false;
                wspi.Keys[WindowWorkspaceSetting.StartPosition] = FormStartPosition.CenterParent;
                wspi.Keys[WindowWorkspaceSetting.AutoSize] = true;


                spi = wspi;
            }
            else
            {
                spi = Activator.CreateInstance(smartPartInfoType) as ISmartPartInfo;
            }

            //spi.Description = Properties.Resources.FindCustomerResultsViewDescription;
            spi.Title = "¬ыбор организации";

            return spi;
        }
        #endregion
      
        internal DataGridView OrgsGrid
        {
            get { return orgsGrid; }
        }
        
        // User interaction handling
        private void oKBtn_Click(object sender, EventArgs e)
        {
            if (this.orgsGrid.SelectedRows.Count != 0)
                _presenter.OnOK(this.orgsGrid.SelectedRows[0]);
            else
                _presenter.OnOK(null);
        }

        private void cancelBtn_Click(object sender, EventArgs e)
        {
            _presenter.OnCancel();            
        }

        private void deleteOrgBtn_Click(object sender, EventArgs e)
        {
            if (this.orgsGrid.SelectedRows.Count != 0)
                _presenter.deleteSelectedOrg(this.orgsGrid.SelectedRows[0]);
        }
        
        /// <summary>
        /// Sets the parent font property.
        /// </summary>
        /// <param name="font">The System.Drawing.Font</param>
        public void SetFont(Font font)
        {
            this.Font = font;
        }

        /// <summary>
        /// ”станавливаем состо€ние кнопок, если пустой список организаций
        /// </summary>
        /// <param name="enable">bool</param>
        public void EnableCtrlButtons(bool okBtn, bool cancelBtn, bool deleteBtn)
        {
            this.oKBtn.Enabled = okBtn;
            this.cancelBtn.Enabled = cancelBtn;
            this.deleteOrgBtn.Enabled = deleteBtn;
        }

        private void orgsGrid_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Enter)
                oKBtn_Click(sender, EventArgs.Empty);  
        }

        private void orgsGrid_CellMouseDoubleClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (orgsGrid.SelectedRows.Count != -1)
                oKBtn_Click(sender, EventArgs.Empty);
        }

        internal void updateview()
        {
            _presenter.updateView("");            
        }       
    }
}

