//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add CAB Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-220-Smart%20Client%20Application%20Template.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using ACOT.Infrastructure.Interface;
using ACOT.Infrastructure.Interface.Constants;
using ACOT.Infrastructure.Interface.BusinessEntities;
using System.Xml;
using System.IO;
using System.Diagnostics;
using Microsoft.Practices.CompositeUI.EventBroker;
using System.Collections.ObjectModel;
using ACOT.Infrastructure.Module.Services;
using ACOT.Infrastructure.Interface.Services;

namespace ACOT.Infrastructure.Module
{
    public class ModuleController : WorkItemController
    {
        [ServiceDependency]
        IContextService context { get; set; }

        public override void Run()
        {            
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in WorkItem.Services collection or 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm
            //context = new Context(WorkItem.RootWorkItem);
            context = WorkItem.Services.Get<IContextService>();
            context.RefreshOrganization();            
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-100-Showing%20UIElements.htm

            // Loads the menu items from menu.xml and put them into the menu strip, hooking
		    // up the menu URIs for command dispatching.
		
            XmlDocument doc = new XmlDocument();
            string menu = Application.StartupPath + "\\menu.xml";
            if (System.IO.File.Exists(menu))
            {
                
                doc.Load(menu);
                XmlNodeList menuList = doc.DocumentElement.ChildNodes;

                foreach (XmlNode rootNode in menuList)
                {
                    // элемнент меню                    
                    string key = rootNode.Attributes["Заголовок"].Value.Replace("_", "&");
                    string label = key;
                    if (rootNode.Attributes["Код"] != null)
                        key = rootNode.Attributes["Код"].Value;

                    ToolStripMenuItemElement menuItem = new ToolStripMenuItemElement();                    
                    menuItem.ID = key; 
                    menuItem.Text = label;
                    menuItem.ToolTipText = rootNode.Attributes["Подсказка"].Value;
                    menuItem.MouseEnter += new EventHandler(onMenuItemEnter);
                    menuItem.MouseLeave += new EventHandler(onMenuItemLeave);
                    //menuItem.Site = "MainMenu";
                    //menuItem.Register = true;
                    //menuItem.RegistrationSite = key;
                    
                    WorkItem.UIExtensionSites[UIExtensionSiteNames.MainMenu].Add(menuItem);


                    WorkItem.UIExtensionSites.RegisterSite(menuItem.ID, menuItem);
                    /*if (menuItem.Register == true)
                    {
                        if (uiMenuItem is PopupMenuTool)
                            workItem.UIExtensionSites.RegisterSite(menuItem.RegistrationSite, menuItem);
                        else
                            workItem.UIExtensionSites.RegisterSite(menuItem.RegistrationSite, menuItem);
                    }*/
                    
                    
                    if (rootNode.ChildNodes.Count != 0)
                        nodesWalk(rootNode, menuItem);
                }
            }
            else
                MessageBox.Show(ErrorNames.Err1, "ACOT");
            
            ToolStripMenuItemElement exit = new ToolStripMenuItemElement("&Выход");
            exit.ID = CommandNames.AcotExit;
            exit.CommandName = CommandNames.AcotExit;
            exit.ToolTipText = "Выход из АСОТ";
            WorkItem.UIExtensionSites[UIExtensionSiteNames.MainMenu].Add(exit);
            WorkItem.Commands[CommandNames.AcotExit].AddInvoker(exit, "Click");

            if (OnMainMenuUpdate != null)            
                OnMainMenuUpdate(this, new EventArgs<string>(""));                        
        }

        private void nodesWalk(XmlNode rootNode, object _rootMenuItem)
        {
            XmlNodeList subMenuList = rootNode.ChildNodes;
            ToolStripMenuItemElement rootMenuItem = _rootMenuItem as ToolStripMenuItemElement;

            foreach (XmlNode subMenuNode in subMenuList)
            {                
                // элемент меню
                string key = subMenuNode.Attributes["Заголовок"].Value.Replace("_", "&");
                string label = key;
                bool isFirstItem = false;

                if (subMenuNode.Attributes["Код"] != null)
                    key = subMenuNode.Attributes["Код"].Value;

                if (subMenuNode.Attributes["Г"] != null)
                    isFirstItem = true;

                ToolStripMenuItemElement menuItem = new ToolStripMenuItemElement();

                //if (subMenuNode.ChildNodes.Count != 0)
                //    menuItem = (ToolStripDropDownButton)menuItem;
                
                menuItem.ID = key;                
                menuItem.Text = label;
                menuItem.ToolTipText = subMenuNode.Attributes["Подсказка"].Value;
                menuItem.MouseEnter += new EventHandler(onMenuItemEnter);
                menuItem.MouseLeave += new EventHandler(onMenuItemLeave);
                //menuItem.isFirstItem = isFirstItem;

                #region Устанавливаем будет ли элемент родительским
                /*if (subMenuNode.ChildNodes.Count != 0)
                {
                    XmlNodeList testList = subMenuNode.ChildNodes;
                    if (testList[0].Name != "Запуск")
                    {
                        menuItem.Site = site;
                        menuItem.Register = true;
                        menuItem.RegistrationSite = key;
                    }
                    else
                    {
                        menuItem.Site = site;
                        menuItem.Register = false;
                        menuItem.RegistrationSite = "";
                    }
                }
                else
                {
                    menuItem.Site = site;
                    menuItem.Register = false;
                    menuItem.RegistrationSite = "";
                }
                 */
                #endregion

                //ToolBase uiMenuItem = menuItem.ToMenuItem();
                // Устанавливаем ключь принудительно 
                //menuItem.Key = uiMenuItem.Key;
                
                WorkItem.UIExtensionSites[rootMenuItem.ID].Add(menuItem);
                rootMenuItem.DropDownItems.Add(menuItem);

                /*if (menuItem.Register == true)
                {
                    if (uiMenuItem is PopupMenuTool)
                        workItem.UIExtensionSites.RegisterSite(menuItem.RegistrationSite, ((PopupMenuTool)uiMenuItem).Tools);
                    else
                        workItem.UIExtensionSites.RegisterSite(menuItem.RegistrationSite, uiMenuItem);
                }
                 */


                if (subMenuNode.ChildNodes.Count != 0)
                {
                    XmlNodeList testList = subMenuNode.ChildNodes;
                    if (testList[0].Name == "Запуск")
                    {
                        bool cmdPresent = false;
                        foreach (XmlNode testNode in testList)
                        {
                            //menuCmd.Key = menuItem.Key;

                            string[] cmd = new string[] {testNode.InnerText};//.Split(' ');
                            menuItem.Command.Add(cmd);

                            if (testNode.Attributes["ИмяКоманды"] != null)
                            {
                                cmdPresent = true;
                                menuItem.CommandName = (string)testNode.Attributes[0].Value;
                            }
                            else
                                menuItem.CommandName = "defaultClick";
                            //MenuCommandCollection.items.Add(menuCmd);
                        }
                        if (cmdPresent)
                            WorkItem.Commands[menuItem.CommandName].AddInvoker(menuItem, "Click");                        
                        else
                            menuItem.Click += new EventHandler(menuItem_Click);
                    }
                    else
                    {                           
                        ToolStripDropDownItem td = (ToolStripDropDownItem)menuItem;
                        td.DropDownOpened += new EventHandler(td_DropDownOpened);
                        td.DropDownClosed += new EventHandler(td_DropDownClosed);                                                
                        
                        WorkItem.UIExtensionSites.RegisterSite(menuItem.ID, menuItem);
                        nodesWalk(subMenuNode, menuItem);
                    }
                }                  
            }       
        }
        
        void td_DropDownClosed(object sender, EventArgs e)
        {
            if (sender is ToolStripDropDownItem)
            {
                ToolStripDropDownItem ts = sender as ToolStripDropDownItem;
                ToolStripDropDownItem tso = ts.OwnerItem as ToolStripDropDownItem;
                //tso.DropDown.Left = 100;//Cursor.Position.X + 10;
                //tso.DropDown.AllowTransparency = true;
                //tso.DropDown.Opacity = 1;
            }
        }

        void td_DropDownOpened(object sender, EventArgs e)
        {
            if (sender is ToolStripDropDownItem)
            {
                ToolStripDropDownItem ts = sender as ToolStripDropDownItem;                                
                ToolStripDropDownItem tso = ts.OwnerItem as ToolStripDropDownItem;         
       
                //tso.DropDown.AllowTransparency = true;
                //tso.DropDown.Opacity = 0.1;

                //tso.DropDown.;
                /*System.Drawing.Rectangle r = ts.DropDown.Bounds;                
                r.Y += 100; //Cursor.Position.X + 10;
                r.X += 100; //Cursor.Position.X + 10;

                ts.DropDown.SetBounds(r.X, r.Y, r.Width, r.Height);
                ts.DropDown.Scale(5);
                 */
            }
        }
                      

        private void onMenuItemEnter(object Sender, EventArgs e)
        {
            if (OnStatusUpdate != null)
                OnStatusUpdate(this, new EventArgs<string>((Sender as ToolStripMenuItemElement).ToolTipText));
        }

        private void onMenuItemLeave(object Sender, EventArgs e)
        {
            if (OnStatusUpdate != null)
                OnStatusUpdate(this, new EventArgs<string>(""));
        }

        private void ExtendToolStrip()
        {
            //TODO: add new items to the ToolStrip in the Shell. See the UIExtensionSites collection in the WorkItem. 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-100-Showing%20UIElements.htm
        }

        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-300-Adding%20a%20View.htm

            context.Reload();
        }

        //TODO: Add CommandHandlers and/or Event Subscriptions
        //		See ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-110-Registering%20Commands.htm
        //		See ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-080-Publishing%20and%20Subscribing%20to%20Events.htm

        #region Сведения об организации
        [CommandHandler("00111")]
        public void OnOrgProperties(object sender, EventArgs e)
        {
            try
            {                                                                
                Process p = Process.Start("starter.exe", "SOSALL.exe");
                p.WaitForExit();

                // Обновим данные об организации
                context.RefreshOrganization();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        #endregion

        #region ПеpеходНаСледующийМесяцВключаяSDWIG
        [CommandHandler("00072")]
        public void OnSdwig(object sender, EventArgs e)
        {
            try
            {                
                Process p = Process.Start("kompl.bat");
                p.WaitForExit();                
            }
            catch (System.ComponentModel.Win32Exception ex)
            {
                MessageBox.Show(ex.Message + " workcldr.exe");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        #endregion

        #region Смена организации
        [CommandHandler("00014")]
        public void OnChangeOrg(object sender, EventArgs e)
        {            
            if (OnReadOrgShow != null)
                OnReadOrgShow(this, new EventArgs<string>("N"));         
        }
        #endregion

        #region Установки
        [CommandHandler("00092")]
        public void OnSettingsClick(object sender, EventArgs e)
        {
            if (OnSettingDlgLoad != null)
                OnSettingDlgLoad(this, new EventArgs<string>(ModuleNames.SettingsModule));
            /*SettingsForm set = new SettingsForm();
            if (set.ShowDialog() == DialogResult.OK)
            {
                this.Font = Settings.Default.Font;
                this.splitContainer1.Visible = Settings.Default.ПоказватьДерево;
                this.menuTree.Visible = this.splitContainer1.Visible;
                setBackground();
            }            
             */
        }
        #endregion

        #region ПpоизводственныйКалендаpь
        [CommandHandler("01132")]
        public void OnWorkCldrClick(object sender, EventArgs e)
        {
            запуск32Прецесса("workcldr.exe", "");
        }
        #endregion

        #region Печать PRNLST
        [CommandHandler("00471")]
        public void OnPrnlstClick(object sender, EventArgs e)
        {
            запуск32Прецесса("prnlst.exe", "");
        }
        #endregion

        #region ПечатьPRNCARD
        [CommandHandler("00472")]
        public void OnPrnCardClick(object sender, EventArgs e)
        {
            запуск32Прецесса("prncard.exe", "");
        }
        #endregion

        #region ПреобразованиеФайловTXT2DBF
        [CommandHandler("00473")]
        public void OnTxt2DBFClick(object sender, EventArgs e)
        {
            try
            {
                Process p = Process.Start("view.exe", "*.txt");
                while (!p.HasExited) { };
                запуск32Прецесса("txt2dbf.exe", "");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ACOT");
            }

        }
        #endregion

        #region Показать справку
        [CommandHandler("00811")]
        public void OnHelpShowClick(object sender, EventArgs e)
        {
            try
            {
                string help = Application.StartupPath + "\\Help\\Книги.chm";
                if (File.Exists(help))
                {
                    Process.Start(help);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        #endregion

        #region Печать _книг документации
        [CommandHandler("00815")]
        public void OnHelpPrintClick(object sender, EventArgs e)
        {
            запуск32Прецесса("mp.exe", "");
        }
        #endregion

        #region Просмотр дат файлов exe
        [CommandHandler("00781")]
        public void OnInfoViewExeClick(object sender, EventArgs e)
        {
            if (OnInfoViewLoad != null)
                OnInfoViewLoad(this, new EventArgs<int>(0));
            //запуск32Прецесса("InfoView.exe", "exe");
        }
        #endregion

        #region Просмотр дат файлов res
        [CommandHandler("00782")]
        public void OnInfoViewResClick(object sender, EventArgs e)
        {
            if (OnInfoViewLoad != null)
                OnInfoViewLoad(this, new EventArgs<int>(1));
            //запуск32Прецесса("InfoView.exe", "res");
        }
        #endregion

        #region Просмотр дат файлов hlp
        [CommandHandler("00783")]
        public void OnInfoViewHlpClick(object sender, EventArgs e)
        {
            if (OnInfoViewLoad != null)
                OnInfoViewLoad(this, new EventArgs<int>(2));
            //запуск32Прецесса("InfoView.exe", "hlp");
        }
        #endregion

        #region Просмотр ДАТ и РАЗМЕРОВ наборов текущей организации
        [CommandHandler("00784")]
        public void OnInfoViewOrgClick(object sender, EventArgs e)
        {
            //(string)Registry.GetValue(RegConstants.REGPATH, RegConstants.ORGNAME, "");
            //IContextService context = WorkItem.Services.Get<IContextService>();
            //string ext = context.orgname;
                if (OnInfoViewLoad != null)
                    OnInfoViewLoad(this, new EventArgs<int>(3));            
            
                //запуск32Прецесса("InfoView.exe", ext);
            //else
            //MessageBox.Show(ACOT.Properties.Resources.Err2);

        }
        #endregion

        #region Просмотр ДАТ и РАЗМЕРОВ *.???
        [CommandHandler("00785")]
        public void OnInfoViewAllClick(object sender, EventArgs e)
        {
            if (OnInfoViewLoad != null)
                OnInfoViewLoad(this, new EventArgs<int>(4));
            //InfoViewModule.InfoViewModuleInit infoview = new InfoViewModule.InfoViewModuleInit(true);
        }
        #endregion

        #region Кнопка "О программе"
        [CommandHandler("00093")]
        public void OnHelpAbout(object sender, EventArgs e)
        {
            //About.AboutModuleInit about = new About.AboutModuleInit();
            if (OnAboutBoxLoad != null)
                OnAboutBoxLoad(this, new EventArgs<string>(ModuleNames.AboutModule));
        }
        #endregion

        #region Кнопка "Универсальный обмен данными XML"
        [CommandHandler("00091")]
        public void OnExchange1Cv8ModuleOpen(object sender, EventArgs e)
        {            
            if (OnExchange1Cv8Load != null)
                OnExchange1Cv8Load(this, new EventArgs<string>(ModuleNames.Exchange1CModule));
        }
        #endregion

        #region По умолчанию
        //[CommandHandler("defaultClick")]
        public void menuItem_Click(object sender, EventArgs e)
        {
            try
            {
                IContextService context = WorkItem.RootWorkItem.Services.Get<IContextService>();                
                ToolStripMenuItemElement ts = sender as ToolStripMenuItemElement;
                Collection<string[]> commands = ts.Command;

                if (commands.Count != 0)
                {
                    string paras = "";
                    foreach (string[] cmd in commands)
                        paras += cmd[0] + "|";
                                            
                    int idx = paras.LastIndexOf("|");
                    paras = paras.Remove(idx, 1);                    
                    Process p = Process.Start("starter.exe", paras);
                    p.WaitForExit();                                        
                }               
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ACOT");
            }
        }
        #endregion

        private void запуск32Прецесса(string filename, string args)
        {
            try
            {
                IContextService context = WorkItem.Services.Get<IContextService>();
                Process p = Process.Start(filename, args);
            }
            catch (System.ComponentModel.Win32Exception ex)
            {
                MessageBox.Show(ex.Message + " " + filename, "ACOT");
            }
        }

        [EventPublication(EventTopicNames.AboutDlgLoad, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> OnAboutBoxLoad;

        [EventPublication(EventTopicNames.ReadOrgShow, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> OnReadOrgShow;

        [EventPublication(EventTopicNames.SettingDlgLoad, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> OnSettingDlgLoad;

        [EventPublication(EventTopicNames.StatusUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> OnStatusUpdate;

        [EventPublication(EventTopicNames.MainMenuUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> OnMainMenuUpdate;

        [EventPublication(EventTopicNames.InfoViewLoad, PublicationScope.Global)]
        public event EventHandler<EventArgs<int>> OnInfoViewLoad;

        [EventPublication(EventTopicNames.Exchange1Cv8Load, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> OnExchange1Cv8Load;

        [EventSubscription(EventTopicNames.MainMenuClickExecute, ThreadOption.UserInterface)]
        public void MainMenuClickHandler(object sender, EventArgs<ToolStripMenuItemElement> e)
        {
            if (e.Data.CommandName == "defaultClick")
            {                
                menuItem_Click(e.Data, EventArgs.Empty);
            }
            else
                WorkItem.Commands[e.Data.CommandName].Execute();                          
        }
    }
}
