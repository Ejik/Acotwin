//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Foundational Module" recipe.
//
// The Module class derives from the CAB base class ModuleInit and it will be instantiated
// when the module is loaded by the CAB infrastructure.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-020-How_to_Create_a_Business_Module.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Services;
using Microsoft.Practices.ObjectBuilder;
using ACOT.Infrastructure.BootStrap.Constants;
using ACOT.Infrastructure.Interface.Services;

namespace ACOT.Infrastructure.BootStrap
{
    public class Module : ModuleInit
    {
        [ServiceDependency]
        public IContextService context { get; set; }

        private WorkItem _rootWorkItem;
        
        [InjectionConstructor]
        public Module([ServiceDependency] WorkItem rootWorkItem)
        {
            _rootWorkItem = rootWorkItem;
        }

        public override void Load()
        {
            base.Load();

            string destFileName = context.startupDir + "\\starter.exe";

            if (!System.IO.File.Exists(destFileName))
            {
                string sourceFileName = System.Windows.Forms.Application.StartupPath + "\\starter.exe";
                System.IO.File.Copy(sourceFileName, destFileName);
            }

            // NOTE: 
            // The layout view in this module defines the layout of the shell. To do this, it
            // loads its view into a shell Workspace named "LayoutWorkspace". If the shell does 
            // not contain a Workspace with this name, the module will throw a ModuleLoadException exception. 
            // 
            // If you see this exception, you can modify the ShowLayoutView method to use a Workspace 
            // name available in shell, or change the name of a Workspace in the shell to "LayoutWorkspace".
            //ShowLayoutView();

        }

        private void ShowLayoutView()
        {
            if (_rootWorkItem.Workspaces.Contains(WorkspaceNames.MdiWindows))
            {
                LayoutView layout = _rootWorkItem.Items.AddNew<LayoutView>();
                _rootWorkItem.Workspaces[WorkspaceNames.MdiWindows].Show(layout);
            }
            else
                throw new ModuleLoadException("LayoutWorkpsace not found");
        }
    }
}
