//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add CAB Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-220-Smart%20Client%20Application%20Template.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using ACOT.Infrastructure.Interface;
using ACOT.Infrastructure.Interface.BusinessEntities;
using ACOT.Infrastructure.Interface.Constants;
using ACOT.Infrastructure.Interface.Data;
using ACOT.Infrastructure.Interface.Services;
using ACOT.Infrastructure.Module.Views;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using Microsoft.Practices.CompositeUI.EventBroker;
using WorkspaceNames=ACOT.Infrastructure.Module.Constants.WorkspaceNames;

namespace ACOT.Infrastructure.Module
{
    public class ModuleController : WorkItemController
    {
        private TreeMenuView _treeView;

        [ServiceDependency]
        public IContextService context
        {
            get;
            set;
        }

        [ServiceDependency]
        public IMenuImporterService menuImporter
        {
            get;
            set;
        }

        public override void Run()
        {
            AddServices();
            AddViews();
            ExtendMenu();
            ExtendToolStrip();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in WorkItem.Services collection or 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm
            //context = new Context(WorkItem.RootWorkItem);
            //context = WorkItem.RootWorkItem.Services.Get<IContextService>();
            //menuImporter = WorkItem.RootWorkItem.Services.Get<IMenuImporterService>();            
        }

        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-300-Adding%20a%20View.htm

            LayoutView view = WorkItem.Items.AddNew<LayoutView>(WorkspaceNames.SplashLayoutWorkspace);
            WorkItem.Workspaces[Interface.Constants.WorkspaceNames.ModalWindows].Show(view);

            // ѕоказываем дерево меню. ƒобавл€ем его в главную рабочую область.
            _treeView = WorkItem.Items.AddNew<TreeMenuView>(WorkspaceNames.TreeLayoutWorkspace);
            WorkItem.RootWorkItem.Workspaces[WorkspaceNames.DeckWorkspace].Show(_treeView);
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-100-Showing%20UIElements.htm

            // Loads the menu items from menu.dat and put them into the menu strip, hooking
            // up the menu URIs for command dispatching.
            menuImporter.ParseData();
            foreach (MenuData._mainMenuRow row in context.menuData.Tables["_mainMenu"].Rows)
            {
                ToolStripMenuItemElement menuItem = new ToolStripMenuItemElement();
                string id = row.ID;
                menuItem.ID = row.ID;
                menuItem.Text = row.NAME;
                menuItem.ToolTipText = row.IsTIPNull() == true ? "" : row.TIP;
                menuItem.CommandName = row.CMDNAME;

                if (!row.IsCMD1Null())
                {
                    if (menuItem.CommandName != "defaultClick")
                        WorkItem.Commands[menuItem.CommandName].AddInvoker(menuItem, "Click");
                    else
                        menuItem.Click += new EventHandler(menuItem_Click);
                }

                menuItem.MouseEnter += new EventHandler(onMenuItemEnter);
                menuItem.MouseLeave += new EventHandler(onMenuItemLeave);

                string site = GetUIExtensionSite(WorkItem, menuItem.ID);
                if (site == string.Empty)
                    WorkItem.RootWorkItem.UIExtensionSites[UIExtensionSiteNames.MainMenu].Add(menuItem);
                else
                    WorkItem.RootWorkItem.UIExtensionSites[site].Add(menuItem);

                WorkItem.RootWorkItem.UIExtensionSites.RegisterSite(menuItem.ID, menuItem.DropDownItems);
            }
            //if (context.terminate)
            //{
            //    MessageBox.Show(ErrorNames.Err4, "Acotwin");
            //    OnFileExitClick(this, EventArgs.Empty);
            //}
            //else
            context.Reload();
        }

        private void ExtendToolStrip()
        {
            //TODO: add new items to the ToolStrip in the Shell. See the UIExtensionSites collection in the WorkItem. 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-100-Showing%20UIElements.htm
            _treeView.FillTree();
        }

        private string GetUIExtensionSite(WorkItem workItem, string p)
        {
            string buf = "0" + p.Remove(p.Length - 1);
            if (workItem.RootWorkItem.UIExtensionSites.Contains(buf))
            {
                return buf;
            }
            else
                return string.Empty;
            //foreach (string s in workItem.RootWorkItem.UIExtensionSites)            
            //    if (buf == s)
            //        return s;
        }

        private void td_DropDownClosed(object sender, EventArgs e)
        {
            if (sender is ToolStripDropDownItem)
            {
                ToolStripDropDownItem ts = sender as ToolStripDropDownItem;
                ToolStripDropDownItem tso = ts.OwnerItem as ToolStripDropDownItem;
                //tso.DropDown.Left = 100;//Cursor.Position.X + 10;
                //tso.DropDown.AllowTransparency = true;
                //tso.DropDown.Opacity = 1;
            }
        }

        private void td_DropDownOpened(object sender, EventArgs e)
        {
            if (sender is ToolStripDropDownItem)
            {
                ToolStripDropDownItem ts = sender as ToolStripDropDownItem;
                ToolStripDropDownItem tso = ts.OwnerItem as ToolStripDropDownItem;

                //tso.DropDown.AllowTransparency = true;
                //tso.DropDown.Opacity = 0.1;

                //tso.DropDown.;
                /*System.Drawing.Rectangle r = ts.DropDown.Bounds;                
                r.Y += 100; //Cursor.Position.X + 10;
                r.X += 100; //Cursor.Position.X + 10;

                ts.DropDown.SetBounds(r.X, r.Y, r.Width, r.Height);
                ts.DropDown.Scale(5);
                 */
            }
        }

        private void onMenuItemEnter(object Sender, EventArgs e)
        {
            if (OnStatusUpdate != null)
                OnStatusUpdate(this, new EventArgs<string>((Sender as ToolStripMenuItemElement).ToolTipText));
        }

        private void onMenuItemLeave(object Sender, EventArgs e)
        {
            if (OnStatusUpdate != null)
                OnStatusUpdate(this, new EventArgs<string>(""));
        }

        //TODO: Add CommandHandlers and/or Event Subscriptions
        //		See ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-110-Registering%20Commands.htm
        //		See ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-080-Publishing%20and%20Subscribing%20to%20Events.htm

        #region —ведени€ об организации

        [CommandHandler("00111")]
        public void OnOrgProperties(object sender, EventArgs e)
        {
            try
            {
                Process p = Process.Start("starter.exe", "SOSALL.exe");
                p.WaitForExit();

                // ќбновим данные об организации
                context.RefreshOrganization();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        #endregion

        #region ѕеpеходЌа—ледующийћес€ц¬ключа€SDWIG

        [CommandHandler("00072")]
        public void OnSdwig(object sender, EventArgs e)
        {
            try
            {
                Process p = Process.Start("kompl.bat");
                p.WaitForExit();
            }
            catch (Win32Exception ex)
            {
                MessageBox.Show(ex.Message + " workcldr.exe");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        #endregion

        #region —мена организации

        [CommandHandler("00014")]
        public void OnChangeOrg(object sender, EventArgs e)
        {
            if (OnReadOrgShow != null)
                OnReadOrgShow(this, new EventArgs<string>("N"));
        }

        #endregion

        #region ”становки

        [CommandHandler(CommandNames.SettingsShow)]
        public void OnSettingsClick(object sender, EventArgs e)
        {
            Collection<string> cl = new Collection<string>();
            cl.Add(ModuleNames.SettingsModule);
            if (OnModuleLoad != null)
                OnModuleLoad(this, new EventArgs<Collection<string>>(cl));
        }

        #endregion

        #region ѕpоизводственный алендаpь

        [CommandHandler("01132")]
        public void OnWorkCldrClick(object sender, EventArgs e)
        {
            запуск32ѕрецесса("workcldr.exe", "");
        }

        #endregion

        #region ѕечать PRNLST

        [CommandHandler("00471")]
        public void OnPrnlstClick(object sender, EventArgs e)
        {
            запуск32ѕрецесса("prnlst.exe", "");
        }

        #endregion

        #region ѕечать PRNCARD

        [CommandHandler("00472")]
        public void OnPrnCardClick(object sender, EventArgs e)
        {
            запуск32ѕрецесса("prncard.exe", "");
        }

        #endregion

        #region ѕреобразование‘айловTXT2DBF

        [CommandHandler("00473")]
        public void OnTxt2DBFClick(object sender, EventArgs e)
        {
            try
            {
                Process p = Process.Start("view.exe", "*.txt");
                while (!p.HasExited)
                {
                }
                ;
                запуск32ѕрецесса("txt2dbf.exe", "");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "ACOT");
            }
        }

        #endregion

        #region ѕоказать справку

        [CommandHandler("00811")]
        public void OnHelpShowClick(object sender, EventArgs e)
        {
            try
            {
                string help = Application.StartupPath + "\\Help\\ ниги.chm";
                if (File.Exists(help))
                {
                    Process.Start(help);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        #endregion

        #region ѕечать _книг документации

        [CommandHandler("00815")]
        public void OnHelpPrintClick(object sender, EventArgs e)
        {
            запуск32ѕрецесса("mp.exe", "");
        }

        #endregion

        //#region ѕросмотр дат файлов exe
        //[CommandHandler(CommandNames.InfoViewExeShow)]
        //public void OnInfoViewExeClick(object sender, EventArgs e)
        //{
        //    Collection<string> cl = new Collection<string>();
        //    cl.Add(ModuleNames.InfoViewModule);
        //    cl.Add("exe");
        //    if (OnModuleLoad != null)
        //        OnModuleLoad(this, new EventArgs<Collection<string>>(cl));
        //    //if (OnInfoViewLoad != null)
        //    //    OnInfoViewLoad(this, new EventArgs<int>(0));
        //}
        //#endregion

        //#region ѕросмотр дат файлов res
        //[CommandHandler(CommandNames.InfoViewResShow)]
        //public void OnInfoViewResClick(object sender, EventArgs e)
        //{
        //    Collection<string> cl = new Collection<string>();
        //    cl.Add(ModuleNames.InfoViewModule);
        //    cl.Add("res");
        //    if (OnModuleLoad != null)
        //        OnModuleLoad(this, new EventArgs<Collection<string>>(cl));

        //    //if (OnInfoViewLoad != null)
        //    //    OnInfoViewLoad(this, new EventArgs<int>(1));
        //}
        //#endregion

        //#region ѕросмотр дат файлов hlp
        //[CommandHandler(CommandNames.InfoViewHlpShow)]
        //public void OnInfoViewHlpClick(object sender, EventArgs e)
        //{
        //    Collection<string> cl = new Collection<string>();
        //    cl.Add(ModuleNames.InfoViewModule);
        //    cl.Add("hlp");
        //    if (OnModuleLoad != null)
        //        OnModuleLoad(this, new EventArgs<Collection<string>>(cl));
        //    //if (OnInfoViewLoad != null)
        //    //    OnInfoViewLoad(this, new EventArgs<int>(2));
        //}
        //#endregion

        //#region ѕросмотр ƒј“ и –ј«ћ≈–ќ¬ наборов текущей организации
        //[CommandHandler(CommandNames.InfoViewCurShow)]
        //public void OnInfoViewOrgClick(object sender, EventArgs e)
        //{
        //    Collection<string> cl = new Collection<string>();
        //    cl.Add(ModuleNames.InfoViewModule);
        //    cl.Add("org");
        //    if (OnModuleLoad != null)
        //        OnModuleLoad(this, new EventArgs<Collection<string>>(cl));
        //    //if (OnInfoViewLoad != null)
        //    //    OnInfoViewLoad(this, new EventArgs<int>(2));

        //    //if (OnInfoViewLoad != null)
        //    //    OnInfoViewLoad(this, new EventArgs<int>(3));            
        //}
        //#endregion
        //
        //#region ѕросмотр ƒј“ и –ј«ћ≈–ќ¬ *.???
        //[CommandHandler(CommandNames.InfoViewAllShow)]
        //public void OnInfoViewAllClick(object sender, EventArgs e)
        //{
        //    Collection<string> cl = new Collection<string>();
        //    cl.Add(ModuleNames.InfoViewModule);
        //    cl.Add("*.*");
        //    if (OnModuleLoad != null)
        //        OnModuleLoad(this, new EventArgs<Collection<string>>(cl));
        //    //if (OnInfoViewLoad != null)
        //    //    OnInfoViewLoad(this, new EventArgs<int>(4));
        //}
        //#endregion

        #region  нопка "ќ программе"

        [CommandHandler(CommandNames.AboutBoxShow)]
        public void OnHelpAbout(object sender, EventArgs e)
        {
            Collection<string> cl = new Collection<string>();
            cl.Add(ModuleNames.AboutModule);
            if (OnModuleLoad != null)
                OnModuleLoad(this, new EventArgs<Collection<string>>(cl));
        }

        #endregion

        #region  нопка "”ниверсальный обмен данными XML"

        [CommandHandler(CommandNames.Exchange1CDlgShow)]
        public void OnExchange1Cv8ModuleOpen(object sender, EventArgs e)
        {
            Collection<string> cl = new Collection<string>();
            cl.Add(ModuleNames.Exchange1CModule);
            if (OnModuleLoad != null)
                OnModuleLoad(this, new EventArgs<Collection<string>>(cl));
        }

        #endregion

        #region ¬ыход из программы

        /// <summary>
        /// Called when the user asks to exit the application.
        /// </summary>        
        [CommandHandler(CommandNames.AcotExit)]
        public void OnFileExitClick(object sender, EventArgs e)
        {
            context.Dispose();
            if (OnAcotExit != null)
                OnAcotExit(this, new EventArgs<string>(""));
        }

        #endregion

        #region ѕо умолчанию

        //[CommandHandler("defaultClick")]
        public void menuItem_Click(object sender, EventArgs e)
        {
            if (File.Exists("starter.exe"))
            {
                DataRow[] rows;
                ToolStripMenuItemElement ts = sender as ToolStripMenuItemElement;
                if (e == EventArgs.Empty)
                {
                    rows = context.menuData.Tables["_mainMenu"].Select("ID=" + sender);
                }
                else
                    rows = context.menuData.Tables["_mainMenu"].Select("ID=" + ts.ID);

                if (rows != null)
                {
                    string paras = "";
                    MenuData._mainMenuRow row = (MenuData._mainMenuRow) rows[0];

                    Collection<string> cl = ParseCmd1(row.CMD1);
                    if (cl.Count == 0)
                    {
                        if (!row.IsCMD1Null()) paras += row.CMD1 + "|";
                        if (!row.IsCMD2Null()) paras += row.CMD2 + "|";
                        if (!row.IsCMD3Null()) paras += row.CMD3 + "|";
                        if (!row.IsCMD4Null()) paras += row.CMD4 + "|";
                        if (!row.IsCMD5Null()) paras += row.CMD5 + "|";

                        int idx = paras.LastIndexOf("|");
                        paras = paras.Remove(idx, 1);

                        try
                        {
                            Process p = Process.Start("starter.exe", paras);
                            p.WaitForExit();
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message, "ACOT");
                        }
                    }
                    else if (OnModuleLoad != null)
                        OnModuleLoad(this, new EventArgs<Collection<string>>(cl));
                }
            }
            else
                MessageBox.Show(ErrorNames.Err3, "ACOT");
        }

        #endregion

        private Collection<string> ParseCmd1(string p)
        {
            Collection<string> input = new Collection<string>();
            int idx = p.IndexOf(".exe");

            string exe = p.Substring(0, idx + 4);

            switch (exe)
            {
                case "infoview.exe":
                    input.Add(ModuleNames.InfoViewModule);
                    p = p.Remove(0, idx + 5);
                    input.Add(p);
                    break;
                case "chkaddr.exe":
                    input.Add(ModuleNames.ChkAddrModule);
                    if (p.Length > idx + 5)
                        input.Add(p.Remove(0, idx + 5));
                    else
                        input.Add("");
                    break;
            }

            return input;
        }

        #region Events publication

        [EventPublication(EventTopicNames.ReadOrgShow, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> OnReadOrgShow;

        [EventPublication(EventTopicNames.ModuleLoad, PublicationScope.Global)]
        public event EventHandler<EventArgs<Collection<string>>> OnModuleLoad;

        [EventPublication(EventTopicNames.StatusUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> OnStatusUpdate;

        [EventPublication(EventTopicNames.MainMenuUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> OnMainMenuUpdate;

        [EventPublication(EventTopicNames.AcotExit, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> OnAcotExit;

        #endregion

        [EventSubscription(EventTopicNames.MainMenuClick, ThreadOption.UserInterface)]
        public void MainMenuClickHandler(object sender, EventArgs<string> e)
        {
            DataRow[] rows = null;
            try
            {
                string a = "ID='" + e.Data + "'";
                rows = context.menuData._mainMenu.Select(a);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            MenuData._mainMenuRow row = (MenuData._mainMenuRow) rows[0];

            if (row.CMDNAME == "defaultClick")
                menuItem_Click(e.Data, EventArgs.Empty);
            else
                WorkItem.Commands[row.CMDNAME].Execute();
        }

        private void запуск32ѕрецесса(string filename, string args)
        {
            try
            {
                //IContextService context = WorkItem.Services.Get<IContextService>();
                Process p = Process.Start(filename, args);
            }
            catch (Win32Exception ex)
            {
                MessageBox.Show(ex.Message + " " + filename, "ACOT");
            }
        }

        [EventSubscription(EventTopicNames.FontChange, ThreadOption.UserInterface)]
        public void FontChangeHandler(object sender, EventArgs<Font> e)
        {
            if (e.Data != null)
            {
                Font font = e.Data;
                
                // TreeMenu font
                _treeView.Tree.Font = font;

                // ƒругие UserControls
            }
        }
    }
}