//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Foundational Module" recipe.
//
// The LayoutView usercontrol defines a layout decoupled from the shell. 
// It provides a left and right workspace, menu bar, tool bar and status bar.
// These ui elements are added as extension sites.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-030-How_to_Create_a_Foundational_Module.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using ACOT.Infrastructure.Controls.TreeViewAdvanced;
using ACOT.Infrastructure.Interface;
using ACOT.Infrastructure.Interface.BusinessEntities;
using ACOT.Infrastructure.Interface.Constants;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;

namespace ACOT.Infrastructure.Module.Views
{
    [SmartPart]
    public partial class TreeMenuView : UserControl, ITreeMenuView, ISmartPartInfoProvider
    {
        private TreeMenuViewPresenter _presenter;

        private MenuStrip menuStrip;

        /// <summary>
        /// Initializes a new instance of the <see cref="T:TreeMenuView"/> class.
        /// </summary>
        public TreeMenuView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Sets the presenter.
        /// </summary>
        /// <value>The presenter.</value>
        [CreateNew]
        public TreeMenuViewPresenter Presenter
        {
            set
            {
                _presenter = value;
                _presenter.View = this;
            }
        }

        #region ILayoutView Members

        public TreeViewAdv Tree
        {
            get { return _treeView; }
        }

        public UserControl View
        {
            get { return this; }
        }

        #endregion

        #region ISmartPartInfoProvider Members

        ISmartPartInfo ISmartPartInfoProvider.GetSmartPartInfo(Type smartPartInfoType)
        {
            ISmartPartInfo spi;
            if (smartPartInfoType.IsAssignableFrom(typeof (WindowSmartPartInfo)))
            {
                WindowSmartPartInfo _LayoutView = new WindowSmartPartInfo();
                //LayoutView.Modal = true;
                _LayoutView.MinimizeBox = false;
                _LayoutView.MaximizeBox = false;
                _LayoutView.ControlBox = false;
                //_LayoutView.Location = ACOT.Infrastructure.Tree.Properties.Settings.Default.TreeLocation;
                //_LayoutView.Height = ACOT.Infrastructure.Tree.Properties.Settings.Default.TreeSize.Height;
                //_LayoutView.Width = ACOT.Infrastructure.Tree.Properties.Settings.Default.TreeSize.Width;

                _LayoutView.Keys[WindowWorkspaceSetting.FormBorderStyle] = FormBorderStyle.SizableToolWindow;
                _LayoutView.Keys[WindowWorkspaceSetting.FormShowIcon] = false;
                //_LayoutView.Keys[WindowWorkspaceSetting.Dock] = DockStyle.Left;
                _LayoutView.Keys[WindowWorkspaceSetting.AutoSize] = true;
                _LayoutView.Keys[WindowWorkspaceSetting.KeyPreview] = true;
                spi = _LayoutView;
            }
            else
            {
                spi = Activator.CreateInstance(smartPartInfoType) as ISmartPartInfo;
            }

            //spi.Description = Properties.Resources.FindCustomerResultsViewDescription;
            spi.Title = "Дерево меню.";

            return spi;
        }

        #endregion

        public void FillTree()
        {
            _presenter.FillTree();
        }

        private void ChildWalk(ToolStripMenuItemElement _rootitem, TreeNode _node)
        {
            foreach (ToolStripMenuItemElement item in _rootitem.DropDownItems)
            {
                TreeNode node = new TreeNode();
                node.Tag = item.ID;
                node.Text = item.Text.Replace("&", "");               
                node.ToolTipText = item.ToolTipText;

                _node.Nodes.Add(node);
                if (item.DropDownItems.Count != 0)
                    ChildWalk(item, node);
            }
        }

        private void _treeView_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (Tree.SelectedNode != null)
            {
                if (e.KeyChar == (char)Keys.Enter)
                {
                    if (Tree.SelectedNode.Children.Count != 0)
                        if (Tree.SelectedNode.IsExpanded)
                            Tree.SelectedNode.Collapse();
                        else
                            Tree.SelectedNode.Expand();
                    else
                    {
                        Node node = (Node)Tree.SelectedNode.Tag;
                        _presenter.TreeClick(node.Tag.ToString());
                    }
                }
            }
        }

        private void _treeView_KeyDown(object sender, KeyEventArgs e)
        {
            if (Tree.SelectedNode != null)
                switch (e.KeyCode)
                {
                    case Keys.F3:
                        _presenter.ViewLST((string) Tree.SelectedNode.Tag);
                        break;
                }
        }

        private void _treeView_DoubleClick(object sender, EventArgs e)
        {
            if (Tree.SelectedNode != null)
            {
                Node node = (Node) Tree.SelectedNode.Tag;
                _presenter.TreeClick(node.Tag.ToString());
            }
        }
    }
}