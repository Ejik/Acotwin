//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Foundational Module" recipe.
//
// The LayoutView usercontrol defines a layout decoupled from the shell. 
// It provides a left and right workspace, menu bar, tool bar and status bar.
// These ui elements are added as extension sites.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-030-How_to_Create_a_Foundational_Module.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Text;
using System.Windows.Forms;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI.SmartParts;
using ACOT.Infrastructure.Interface;
using ACOT.Infrastructure.Interface.Constants;

namespace ACOT.Infrastructure.Module
{
    public partial class LayoutView : UserControl, ILayoutView, ISmartPartInfoProvider
    {
        private LayoutViewPresenter _presenter;

        /// <summary>
        /// Initializes a new instance of the <see cref="T:LayoutView"/> class.
        /// </summary>
        public LayoutView()
        {
            InitializeComponent();
            //this.Dock = DockStyle.Fill;
        }

        #region ISmartPartInfoProvider Members

        ISmartPartInfo ISmartPartInfoProvider.GetSmartPartInfo(Type smartPartInfoType)
        {
            ISmartPartInfo spi;
            if (smartPartInfoType.IsAssignableFrom(typeof(ACOT.Infrastructure.Interface.WindowSmartPartInfo)))
            {
                WindowSmartPartInfo LayoutView = new WindowSmartPartInfo();
                LayoutView.Modal = true;
                LayoutView.MinimizeBox = false;
                LayoutView.MaximizeBox = false;
                LayoutView.ControlBox = false;
                
                //LayoutView.Width = ACOT.InfoViewModule.Properties.Settings.Default.Size.Width;
                //LayoutView.Height = ACOT.InfoViewModule.Properties.Settings.Default.Size.Height;
                //LayoutView.Location = ACOT.InfoViewModule.Properties.Settings.Default.Location;

                LayoutView.Keys[WindowWorkspaceSetting.FormBorderStyle] = FormBorderStyle.FixedToolWindow;                
                LayoutView.Keys[WindowWorkspaceSetting.KeyPreview] = true;
                LayoutView.Keys[WindowWorkspaceSetting.KeyDown] = new KeyEventHandler(LayoutView_KeyDown);
                LayoutView.Keys[WindowWorkspaceSetting.FormShowIcon] = false;
                LayoutView.Keys[WindowWorkspaceSetting.StartPosition] = FormStartPosition.CenterParent;
                LayoutView.Keys[WindowWorkspaceSetting.AutoSize] = true;
                LayoutView.Keys[WindowWorkspaceSetting.FormShowInTaskbar] = true;

                spi = LayoutView;
            }
            else
            {
                spi = Activator.CreateInstance(smartPartInfoType) as ISmartPartInfo;
            }

            //spi.Description = Properties.Resources.FindCustomerResultsViewDescription;
            spi.Title = "Автоматизированная Система Оплаты Труда";

            return spi;
        }

        #endregion

        private void showSplash_CheckedChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ShowSplash = showSplash.Checked;
            Properties.Settings.Default.Save();
        }        
    
        #region ILayoutView Members

        public string  StartDir
        {
            set { this._startdir.Text = value; }
            get { return this._startdir.Text; }
        }

        public FolderBrowserDialog FolderDlg { get { return this._folderBrowserDialog; } }
       
        #endregion

        private void _selFolderBtn_Click(object sender, EventArgs e)
        {
            _presenter.OnSelectFolder();
        }

        private void LayoutView_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
                _presenter.Exit();

            if (e.KeyCode == Keys.Enter)
                _presenter.Next();
        }

        private void okBtn_Click(object sender, EventArgs e)
        {
            _presenter.Next();
        }

        private void _startdir_Leave(object sender, EventArgs e)
        {
            _presenter.saveSettings();
        }

        private void cancelBtn_Click(object sender, EventArgs e)
        {            
            _presenter.Exit();            
        }
}
}
