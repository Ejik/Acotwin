//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ACOT.Infrastructure.Interface.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("WorkersDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class WorkersDataSet : global::System.Data.DataSet {
        
        private WorkersDataTable tableWorkers;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WorkersDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected WorkersDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Workers"] != null)) {
                    base.Tables.Add(new WorkersDataTable(ds.Tables["Workers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                this.InitExpressions();
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WorkersDataTable Workers {
            get {
                return this.tableWorkers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            WorkersDataSet cln = ((WorkersDataSet)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Workers"] != null)) {
                    base.Tables.Add(new WorkersDataTable(ds.Tables["Workers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableWorkers = ((WorkersDataTable)(base.Tables["Workers"]));
            if ((initTable == true)) {
                if ((this.tableWorkers != null)) {
                    this.tableWorkers.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "WorkersDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/WorkersDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableWorkers = new WorkersDataTable(false);
            base.Tables.Add(this.tableWorkers);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWorkers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            WorkersDataSet ds = new WorkersDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.Workers.FULLADDRColumn.Expression = "INDEX + \', \' + KODREG + \', \' +  RAION + \', \' + GOROD + \', \' + NPUNKT + \', \' + ULI" +
                "CA + \', \' + DOM + \', \' + KORPUS + \', \' + KVART";
        }
        
        public delegate void WorkersRowChangeEventHandler(object sender, WorkersRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WorkersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTBN;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnKODSTRAN;
            
            private global::System.Data.DataColumn columnKODREG;
            
            private global::System.Data.DataColumn columnRAION;
            
            private global::System.Data.DataColumn columnGOROD;
            
            private global::System.Data.DataColumn columnNPUNKT;
            
            private global::System.Data.DataColumn columnINDEX;
            
            private global::System.Data.DataColumn columnULICA;
            
            private global::System.Data.DataColumn columnDOM;
            
            private global::System.Data.DataColumn columnKORPUS;
            
            private global::System.Data.DataColumn columnKVART;
            
            private global::System.Data.DataColumn columnFULLADDR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkersDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkersDataTable(bool initExpressions) {
                this.TableName = "Workers";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WorkersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TBNColumn {
                get {
                    return this.columnTBN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KODSTRANColumn {
                get {
                    return this.columnKODSTRAN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KODREGColumn {
                get {
                    return this.columnKODREG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RAIONColumn {
                get {
                    return this.columnRAION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GORODColumn {
                get {
                    return this.columnGOROD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NPUNKTColumn {
                get {
                    return this.columnNPUNKT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INDEXColumn {
                get {
                    return this.columnINDEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ULICAColumn {
                get {
                    return this.columnULICA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOMColumn {
                get {
                    return this.columnDOM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KORPUSColumn {
                get {
                    return this.columnKORPUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KVARTColumn {
                get {
                    return this.columnKVART;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FULLADDRColumn {
                get {
                    return this.columnFULLADDR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkersRow this[int index] {
                get {
                    return ((WorkersRow)(this.Rows[index]));
                }
            }
            
            public event WorkersRowChangeEventHandler WorkersRowChanging;
            
            public event WorkersRowChangeEventHandler WorkersRowChanged;
            
            public event WorkersRowChangeEventHandler WorkersRowDeleting;
            
            public event WorkersRowChangeEventHandler WorkersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWorkersRow(WorkersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkersRow AddWorkersRow(string TBN, string NAME, string KODSTRAN, string KODREG, string RAION, string GOROD, string NPUNKT, string INDEX, string ULICA, string DOM, string KORPUS, string KVART, string FULLADDR) {
                WorkersRow rowWorkersRow = ((WorkersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TBN,
                        NAME,
                        KODSTRAN,
                        KODREG,
                        RAION,
                        GOROD,
                        NPUNKT,
                        INDEX,
                        ULICA,
                        DOM,
                        KORPUS,
                        KVART,
                        FULLADDR};
                rowWorkersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWorkersRow);
                return rowWorkersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkersRow AddWorkersRow(string TBN, string NAME, string KODSTRAN, string KODREG, string RAION, string GOROD, string NPUNKT, string INDEX, string ULICA, string DOM, string KORPUS, string KVART) {
                WorkersRow rowWorkersRow = ((WorkersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TBN,
                        NAME,
                        KODSTRAN,
                        KODREG,
                        RAION,
                        GOROD,
                        NPUNKT,
                        INDEX,
                        ULICA,
                        DOM,
                        KORPUS,
                        KVART,
                        null};
                rowWorkersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWorkersRow);
                return rowWorkersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkersRow FindByID(int ID) {
                return ((WorkersRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WorkersDataTable cln = ((WorkersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WorkersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTBN = base.Columns["TBN"];
                this.columnNAME = base.Columns["NAME"];
                this.columnKODSTRAN = base.Columns["KODSTRAN"];
                this.columnKODREG = base.Columns["KODREG"];
                this.columnRAION = base.Columns["RAION"];
                this.columnGOROD = base.Columns["GOROD"];
                this.columnNPUNKT = base.Columns["NPUNKT"];
                this.columnINDEX = base.Columns["INDEX"];
                this.columnULICA = base.Columns["ULICA"];
                this.columnDOM = base.Columns["DOM"];
                this.columnKORPUS = base.Columns["KORPUS"];
                this.columnKVART = base.Columns["KVART"];
                this.columnFULLADDR = base.Columns["FULLADDR"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTBN = new global::System.Data.DataColumn("TBN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTBN);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnKODSTRAN = new global::System.Data.DataColumn("KODSTRAN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKODSTRAN);
                this.columnKODREG = new global::System.Data.DataColumn("KODREG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKODREG);
                this.columnRAION = new global::System.Data.DataColumn("RAION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAION);
                this.columnGOROD = new global::System.Data.DataColumn("GOROD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGOROD);
                this.columnNPUNKT = new global::System.Data.DataColumn("NPUNKT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNPUNKT);
                this.columnINDEX = new global::System.Data.DataColumn("INDEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINDEX);
                this.columnULICA = new global::System.Data.DataColumn("ULICA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnULICA);
                this.columnDOM = new global::System.Data.DataColumn("DOM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOM);
                this.columnKORPUS = new global::System.Data.DataColumn("KORPUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKORPUS);
                this.columnKVART = new global::System.Data.DataColumn("KVART", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKVART);
                this.columnFULLADDR = new global::System.Data.DataColumn("FULLADDR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFULLADDR);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = 1;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnFULLADDR.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkersRow NewWorkersRow() {
                return ((WorkersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WorkersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WorkersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.FULLADDRColumn.Expression = "INDEX + \', \' + KODREG + \', \' +  RAION + \', \' + GOROD + \', \' + NPUNKT + \', \' + ULI" +
                    "CA + \', \' + DOM + \', \' + KORPUS + \', \' + KVART";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WorkersRowChanged != null)) {
                    this.WorkersRowChanged(this, new WorkersRowChangeEvent(((WorkersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WorkersRowChanging != null)) {
                    this.WorkersRowChanging(this, new WorkersRowChangeEvent(((WorkersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WorkersRowDeleted != null)) {
                    this.WorkersRowDeleted(this, new WorkersRowChangeEvent(((WorkersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WorkersRowDeleting != null)) {
                    this.WorkersRowDeleting(this, new WorkersRowChangeEvent(((WorkersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWorkersRow(WorkersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                WorkersDataSet ds = new WorkersDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WorkersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WorkersRow : global::System.Data.DataRow {
            
            private WorkersDataTable tableWorkers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWorkers = ((WorkersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableWorkers.IDColumn]));
                }
                set {
                    this[this.tableWorkers.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TBN {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.TBNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TBN\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.TBNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KODSTRAN {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.KODSTRANColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KODSTRAN\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.KODSTRANColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KODREG {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.KODREGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KODREG\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.KODREGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RAION {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.RAIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RAION\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.RAIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GOROD {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.GORODColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GOROD\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.GORODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NPUNKT {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.NPUNKTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NPUNKT\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.NPUNKTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INDEX {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.INDEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INDEX\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.INDEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ULICA {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.ULICAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ULICA\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.ULICAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOM {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.DOMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOM\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.DOMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KORPUS {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.KORPUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KORPUS\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.KORPUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KVART {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.KVARTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KVART\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.KVARTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FULLADDR {
                get {
                    try {
                        return ((string)(this[this.tableWorkers.FULLADDRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FULLADDR\' in table \'Workers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkers.FULLADDRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTBNNull() {
                return this.IsNull(this.tableWorkers.TBNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTBNNull() {
                this[this.tableWorkers.TBNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableWorkers.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableWorkers.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKODSTRANNull() {
                return this.IsNull(this.tableWorkers.KODSTRANColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKODSTRANNull() {
                this[this.tableWorkers.KODSTRANColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKODREGNull() {
                return this.IsNull(this.tableWorkers.KODREGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKODREGNull() {
                this[this.tableWorkers.KODREGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRAIONNull() {
                return this.IsNull(this.tableWorkers.RAIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRAIONNull() {
                this[this.tableWorkers.RAIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGORODNull() {
                return this.IsNull(this.tableWorkers.GORODColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGORODNull() {
                this[this.tableWorkers.GORODColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNPUNKTNull() {
                return this.IsNull(this.tableWorkers.NPUNKTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNPUNKTNull() {
                this[this.tableWorkers.NPUNKTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINDEXNull() {
                return this.IsNull(this.tableWorkers.INDEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINDEXNull() {
                this[this.tableWorkers.INDEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsULICANull() {
                return this.IsNull(this.tableWorkers.ULICAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetULICANull() {
                this[this.tableWorkers.ULICAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOMNull() {
                return this.IsNull(this.tableWorkers.DOMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOMNull() {
                this[this.tableWorkers.DOMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKORPUSNull() {
                return this.IsNull(this.tableWorkers.KORPUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKORPUSNull() {
                this[this.tableWorkers.KORPUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKVARTNull() {
                return this.IsNull(this.tableWorkers.KVARTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKVARTNull() {
                this[this.tableWorkers.KVARTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFULLADDRNull() {
                return this.IsNull(this.tableWorkers.FULLADDRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFULLADDRNull() {
                this[this.tableWorkers.FULLADDRColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WorkersRowChangeEvent : global::System.EventArgs {
            
            private WorkersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkersRowChangeEvent(WorkersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591