//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ACOT.Infrastructure.Interface.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("OrganizationDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class OrganizationDataSet : global::System.Data.DataSet {
        
        private AdresTableDataTable tableAdresTable;
        
        private OrgInfoTableDataTable tableOrgInfoTable;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrganizationDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected OrganizationDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AdresTable"] != null)) {
                    base.Tables.Add(new AdresTableDataTable(ds.Tables["AdresTable"]));
                }
                if ((ds.Tables["OrgInfoTable"] != null)) {
                    base.Tables.Add(new OrgInfoTableDataTable(ds.Tables["OrgInfoTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdresTableDataTable AdresTable {
            get {
                return this.tableAdresTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrgInfoTableDataTable OrgInfoTable {
            get {
                return this.tableOrgInfoTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            OrganizationDataSet cln = ((OrganizationDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AdresTable"] != null)) {
                    base.Tables.Add(new AdresTableDataTable(ds.Tables["AdresTable"]));
                }
                if ((ds.Tables["OrgInfoTable"] != null)) {
                    base.Tables.Add(new OrgInfoTableDataTable(ds.Tables["OrgInfoTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAdresTable = ((AdresTableDataTable)(base.Tables["AdresTable"]));
            if ((initTable == true)) {
                if ((this.tableAdresTable != null)) {
                    this.tableAdresTable.InitVars();
                }
            }
            this.tableOrgInfoTable = ((OrgInfoTableDataTable)(base.Tables["OrgInfoTable"]));
            if ((initTable == true)) {
                if ((this.tableOrgInfoTable != null)) {
                    this.tableOrgInfoTable.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "OrganizationDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OrganizationDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAdresTable = new AdresTableDataTable();
            base.Tables.Add(this.tableAdresTable);
            this.tableOrgInfoTable = new OrgInfoTableDataTable();
            base.Tables.Add(this.tableOrgInfoTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAdresTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrgInfoTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            OrganizationDataSet ds = new OrganizationDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AdresTableRowChangeEventHandler(object sender, AdresTableRowChangeEvent e);
        
        public delegate void OrgInfoTableRowChangeEventHandler(object sender, OrgInfoTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdresTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columntna;
            
            private global::System.Data.DataColumn columnfio;
            
            private global::System.Data.DataColumn columnkodstran;
            
            private global::System.Data.DataColumn columnkodreg;
            
            private global::System.Data.DataColumn columnindex;
            
            private global::System.Data.DataColumn columngorod;
            
            private global::System.Data.DataColumn columnn_punkt;
            
            private global::System.Data.DataColumn columnraion;
            
            private global::System.Data.DataColumn columnulica;
            
            private global::System.Data.DataColumn columndom;
            
            private global::System.Data.DataColumn columnkorp;
            
            private global::System.Data.DataColumn columnkvart;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdresTableDataTable() {
                this.TableName = "AdresTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdresTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AdresTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tnaColumn {
                get {
                    return this.columntna;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fioColumn {
                get {
                    return this.columnfio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kodstranColumn {
                get {
                    return this.columnkodstran;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kodregColumn {
                get {
                    return this.columnkodreg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn indexColumn {
                get {
                    return this.columnindex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gorodColumn {
                get {
                    return this.columngorod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn n_punktColumn {
                get {
                    return this.columnn_punkt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raionColumn {
                get {
                    return this.columnraion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ulicaColumn {
                get {
                    return this.columnulica;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn domColumn {
                get {
                    return this.columndom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn korpColumn {
                get {
                    return this.columnkorp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kvartColumn {
                get {
                    return this.columnkvart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdresTableRow this[int index] {
                get {
                    return ((AdresTableRow)(this.Rows[index]));
                }
            }
            
            public event AdresTableRowChangeEventHandler AdresTableRowChanging;
            
            public event AdresTableRowChangeEventHandler AdresTableRowChanged;
            
            public event AdresTableRowChangeEventHandler AdresTableRowDeleting;
            
            public event AdresTableRowChangeEventHandler AdresTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAdresTableRow(AdresTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdresTableRow AddAdresTableRow(int tna, string fio, string kodstran, string kodreg, string index, string gorod, string n_punkt, string raion, string ulica, string dom, string korp, string kvart) {
                AdresTableRow rowAdresTableRow = ((AdresTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        tna,
                        fio,
                        kodstran,
                        kodreg,
                        index,
                        gorod,
                        n_punkt,
                        raion,
                        ulica,
                        dom,
                        korp,
                        kvart};
                rowAdresTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAdresTableRow);
                return rowAdresTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdresTableRow FindBytna(int tna) {
                return ((AdresTableRow)(this.Rows.Find(new object[] {
                            tna})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AdresTableDataTable cln = ((AdresTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AdresTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntna = base.Columns["tna"];
                this.columnfio = base.Columns["fio"];
                this.columnkodstran = base.Columns["kodstran"];
                this.columnkodreg = base.Columns["kodreg"];
                this.columnindex = base.Columns["index"];
                this.columngorod = base.Columns["gorod"];
                this.columnn_punkt = base.Columns["n_punkt"];
                this.columnraion = base.Columns["raion"];
                this.columnulica = base.Columns["ulica"];
                this.columndom = base.Columns["dom"];
                this.columnkorp = base.Columns["korp"];
                this.columnkvart = base.Columns["kvart"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntna = new global::System.Data.DataColumn("tna", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntna);
                this.columnfio = new global::System.Data.DataColumn("fio", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfio);
                this.columnkodstran = new global::System.Data.DataColumn("kodstran", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkodstran);
                this.columnkodreg = new global::System.Data.DataColumn("kodreg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkodreg);
                this.columnindex = new global::System.Data.DataColumn("index", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnindex);
                this.columngorod = new global::System.Data.DataColumn("gorod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngorod);
                this.columnn_punkt = new global::System.Data.DataColumn("n_punkt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnn_punkt);
                this.columnraion = new global::System.Data.DataColumn("raion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraion);
                this.columnulica = new global::System.Data.DataColumn("ulica", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnulica);
                this.columndom = new global::System.Data.DataColumn("dom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndom);
                this.columnkorp = new global::System.Data.DataColumn("korp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkorp);
                this.columnkvart = new global::System.Data.DataColumn("kvart", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkvart);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntna}, true));
                this.columntna.AllowDBNull = false;
                this.columntna.Unique = true;
                this.columnfio.MaxLength = 44;
                this.columnkodstran.MaxLength = 3;
                this.columnkodreg.MaxLength = 2;
                this.columnindex.MaxLength = 6;
                this.columngorod.MaxLength = 40;
                this.columnn_punkt.MaxLength = 40;
                this.columnraion.MaxLength = 25;
                this.columnulica.MaxLength = 40;
                this.columndom.MaxLength = 7;
                this.columnkorp.MaxLength = 2;
                this.columnkvart.MaxLength = 5;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdresTableRow NewAdresTableRow() {
                return ((AdresTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AdresTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AdresTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdresTableRowChanged != null)) {
                    this.AdresTableRowChanged(this, new AdresTableRowChangeEvent(((AdresTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdresTableRowChanging != null)) {
                    this.AdresTableRowChanging(this, new AdresTableRowChangeEvent(((AdresTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdresTableRowDeleted != null)) {
                    this.AdresTableRowDeleted(this, new AdresTableRowChangeEvent(((AdresTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdresTableRowDeleting != null)) {
                    this.AdresTableRowDeleting(this, new AdresTableRowChangeEvent(((AdresTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAdresTableRow(AdresTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OrganizationDataSet ds = new OrganizationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdresTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrgInfoTableDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columntitle;
            
            private global::System.Data.DataColumn columnext;
            
            private global::System.Data.DataColumn columncurmonth;
            
            private global::System.Data.DataColumn columncuryear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrgInfoTableDataTable() {
                this.TableName = "OrgInfoTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrgInfoTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrgInfoTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extColumn {
                get {
                    return this.columnext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn curmonthColumn {
                get {
                    return this.columncurmonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn curyearColumn {
                get {
                    return this.columncuryear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrgInfoTableRow this[int index] {
                get {
                    return ((OrgInfoTableRow)(this.Rows[index]));
                }
            }
            
            public event OrgInfoTableRowChangeEventHandler OrgInfoTableRowChanging;
            
            public event OrgInfoTableRowChangeEventHandler OrgInfoTableRowChanged;
            
            public event OrgInfoTableRowChangeEventHandler OrgInfoTableRowDeleting;
            
            public event OrgInfoTableRowChangeEventHandler OrgInfoTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrgInfoTableRow(OrgInfoTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrgInfoTableRow AddOrgInfoTableRow(string id, string title, string ext, int curmonth, int curyear) {
                OrgInfoTableRow rowOrgInfoTableRow = ((OrgInfoTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        title,
                        ext,
                        curmonth,
                        curyear};
                rowOrgInfoTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOrgInfoTableRow);
                return rowOrgInfoTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OrgInfoTableDataTable cln = ((OrgInfoTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OrgInfoTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columntitle = base.Columns["title"];
                this.columnext = base.Columns["ext"];
                this.columncurmonth = base.Columns["curmonth"];
                this.columncuryear = base.Columns["curyear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columntitle = new global::System.Data.DataColumn("title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columnext = new global::System.Data.DataColumn("ext", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnext);
                this.columncurmonth = new global::System.Data.DataColumn("curmonth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncurmonth);
                this.columncuryear = new global::System.Data.DataColumn("curyear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncuryear);
                this.columncurmonth.DefaultValue = ((int)(1));
                this.columncuryear.DefaultValue = ((int)(2000));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrgInfoTableRow NewOrgInfoTableRow() {
                return ((OrgInfoTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OrgInfoTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OrgInfoTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrgInfoTableRowChanged != null)) {
                    this.OrgInfoTableRowChanged(this, new OrgInfoTableRowChangeEvent(((OrgInfoTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrgInfoTableRowChanging != null)) {
                    this.OrgInfoTableRowChanging(this, new OrgInfoTableRowChangeEvent(((OrgInfoTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrgInfoTableRowDeleted != null)) {
                    this.OrgInfoTableRowDeleted(this, new OrgInfoTableRowChangeEvent(((OrgInfoTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrgInfoTableRowDeleting != null)) {
                    this.OrgInfoTableRowDeleting(this, new OrgInfoTableRowChangeEvent(((OrgInfoTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrgInfoTableRow(OrgInfoTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                OrganizationDataSet ds = new OrganizationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrgInfoTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AdresTableRow : global::System.Data.DataRow {
            
            private AdresTableDataTable tableAdresTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdresTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdresTable = ((AdresTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tna {
                get {
                    return ((int)(this[this.tableAdresTable.tnaColumn]));
                }
                set {
                    this[this.tableAdresTable.tnaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fio {
                get {
                    try {
                        return ((string)(this[this.tableAdresTable.fioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fio\' in table \'AdresTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdresTable.fioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kodstran {
                get {
                    try {
                        return ((string)(this[this.tableAdresTable.kodstranColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kodstran\' in table \'AdresTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdresTable.kodstranColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kodreg {
                get {
                    try {
                        return ((string)(this[this.tableAdresTable.kodregColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kodreg\' in table \'AdresTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdresTable.kodregColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string index {
                get {
                    try {
                        return ((string)(this[this.tableAdresTable.indexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'index\' in table \'AdresTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdresTable.indexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gorod {
                get {
                    try {
                        return ((string)(this[this.tableAdresTable.gorodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gorod\' in table \'AdresTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdresTable.gorodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string n_punkt {
                get {
                    try {
                        return ((string)(this[this.tableAdresTable.n_punktColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'n_punkt\' in table \'AdresTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdresTable.n_punktColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string raion {
                get {
                    try {
                        return ((string)(this[this.tableAdresTable.raionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'raion\' in table \'AdresTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdresTable.raionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ulica {
                get {
                    try {
                        return ((string)(this[this.tableAdresTable.ulicaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ulica\' in table \'AdresTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdresTable.ulicaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dom {
                get {
                    try {
                        return ((string)(this[this.tableAdresTable.domColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dom\' in table \'AdresTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdresTable.domColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string korp {
                get {
                    try {
                        return ((string)(this[this.tableAdresTable.korpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'korp\' in table \'AdresTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdresTable.korpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kvart {
                get {
                    try {
                        return ((string)(this[this.tableAdresTable.kvartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kvart\' in table \'AdresTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAdresTable.kvartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfioNull() {
                return this.IsNull(this.tableAdresTable.fioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfioNull() {
                this[this.tableAdresTable.fioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskodstranNull() {
                return this.IsNull(this.tableAdresTable.kodstranColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkodstranNull() {
                this[this.tableAdresTable.kodstranColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskodregNull() {
                return this.IsNull(this.tableAdresTable.kodregColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkodregNull() {
                this[this.tableAdresTable.kodregColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsindexNull() {
                return this.IsNull(this.tableAdresTable.indexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetindexNull() {
                this[this.tableAdresTable.indexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgorodNull() {
                return this.IsNull(this.tableAdresTable.gorodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgorodNull() {
                this[this.tableAdresTable.gorodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isn_punktNull() {
                return this.IsNull(this.tableAdresTable.n_punktColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setn_punktNull() {
                this[this.tableAdresTable.n_punktColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsraionNull() {
                return this.IsNull(this.tableAdresTable.raionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetraionNull() {
                this[this.tableAdresTable.raionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsulicaNull() {
                return this.IsNull(this.tableAdresTable.ulicaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetulicaNull() {
                this[this.tableAdresTable.ulicaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdomNull() {
                return this.IsNull(this.tableAdresTable.domColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdomNull() {
                this[this.tableAdresTable.domColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskorpNull() {
                return this.IsNull(this.tableAdresTable.korpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkorpNull() {
                this[this.tableAdresTable.korpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskvartNull() {
                return this.IsNull(this.tableAdresTable.kvartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkvartNull() {
                this[this.tableAdresTable.kvartColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrgInfoTableRow : global::System.Data.DataRow {
            
            private OrgInfoTableDataTable tableOrgInfoTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrgInfoTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrgInfoTable = ((OrgInfoTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tableOrgInfoTable.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'OrgInfoTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrgInfoTable.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    try {
                        return ((string)(this[this.tableOrgInfoTable.titleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'title\' in table \'OrgInfoTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrgInfoTable.titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ext {
                get {
                    try {
                        return ((string)(this[this.tableOrgInfoTable.extColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ext\' in table \'OrgInfoTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrgInfoTable.extColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int curmonth {
                get {
                    try {
                        return ((int)(this[this.tableOrgInfoTable.curmonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'curmonth\' in table \'OrgInfoTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrgInfoTable.curmonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int curyear {
                get {
                    try {
                        return ((int)(this[this.tableOrgInfoTable.curyearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'curyear\' in table \'OrgInfoTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrgInfoTable.curyearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableOrgInfoTable.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableOrgInfoTable.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstitleNull() {
                return this.IsNull(this.tableOrgInfoTable.titleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettitleNull() {
                this[this.tableOrgInfoTable.titleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextNull() {
                return this.IsNull(this.tableOrgInfoTable.extColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextNull() {
                this[this.tableOrgInfoTable.extColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscurmonthNull() {
                return this.IsNull(this.tableOrgInfoTable.curmonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcurmonthNull() {
                this[this.tableOrgInfoTable.curmonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscuryearNull() {
                return this.IsNull(this.tableOrgInfoTable.curyearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcuryearNull() {
                this[this.tableOrgInfoTable.curyearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AdresTableRowChangeEvent : global::System.EventArgs {
            
            private AdresTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdresTableRowChangeEvent(AdresTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdresTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrgInfoTableRowChangeEvent : global::System.EventArgs {
            
            private OrgInfoTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrgInfoTableRowChangeEvent(OrgInfoTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrgInfoTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591