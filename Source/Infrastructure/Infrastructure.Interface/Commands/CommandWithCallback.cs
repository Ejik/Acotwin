//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by this guidance package as part of the solution template
//
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-210-Creating%20a%20Smart%20Client%20Solution.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

namespace ACOT.Infrastructure.Interface.Commands
{
    public abstract class CommandWithCallback<TService, TReturnType> : Command<TService>
        where TService : ISupportsTimeout
    {
        public delegate void CallbackType(bool success, TReturnType returnValue);

        private CallbackType _callback;

        protected CommandWithCallback(TService service, int timeout, CallbackType callback)
            : base(service, timeout)
        {
            _callback = callback;
        }

        protected override sealed void DoExecute()
        {
            bool success = false;
            TReturnType returnValue = default(TReturnType);

            try
            {
                returnValue = DoCallService();
                success = true;
            }
            catch (Exception ex)
            {
                ExceptionPolicy.HandleException(ex, "Default Policy");
                returnValue = default(TReturnType);
                success = false;
            }

            _callback(success, returnValue);
        }

        protected abstract TReturnType DoCallService();
    }
}
