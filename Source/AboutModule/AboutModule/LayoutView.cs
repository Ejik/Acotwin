//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Foundational Module" recipe.
//
// The LayoutView usercontrol defines a layout decoupled from the shell. 
// It provides a left and right workspace, menu bar, tool bar and status bar.
// These ui elements are added as extension sites.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-030-How_to_Create_a_Foundational_Module.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Text;
using System.Windows.Forms;
using ACOT.AboutModule.Constants;
using Microsoft.Practices.ObjectBuilder;
using System.Reflection;
using Microsoft.Practices.CompositeUI.SmartParts;
using ACOT.Infrastructure.Interface;
using ACOT.Infrastructure.Interface.Constants;

namespace ACOT.AboutModule
{
    public partial class LayoutView : UserControl, ILayoutView, ISmartPartInfoProvider
    {
        private LayoutViewPresenter _presenter;

        /// <summary>
        /// Initializes a new instance of the <see cref="T:LayoutView"/> class.
        /// </summary>
        public LayoutView()
        {
            InitializeComponent();
            //this._moduleWorkspace.Name = ACOT.AboutModule.Constants.WorkspaceNames.AboutModuleLayout;            
        }

        #region ISmartPartInfoProvider Members

        ISmartPartInfo ISmartPartInfoProvider.GetSmartPartInfo(Type smartPartInfoType)
        {
            ISmartPartInfo spi;
            if (smartPartInfoType.IsAssignableFrom(typeof(ACOT.Infrastructure.Interface.WindowSmartPartInfo)))
            {
                WindowSmartPartInfo LayoutView = new WindowSmartPartInfo();
                LayoutView.Modal = true;
                LayoutView.MinimizeBox = false;
                LayoutView.MaximizeBox = false;
                LayoutView.ControlBox = true;

                LayoutView.Keys[WindowWorkspaceSetting.FormBorderStyle] = FormBorderStyle.FixedDialog;                
                LayoutView.Keys[WindowWorkspaceSetting.FormShowIcon] = false;
                LayoutView.Keys[WindowWorkspaceSetting.StartPosition] = FormStartPosition.CenterParent;                
                LayoutView.Keys[WindowWorkspaceSetting.AutoSize] = true;
                LayoutView.Keys[WindowWorkspaceSetting.KeyPreview] = true;
                LayoutView.Keys[WindowWorkspaceSetting.KeyDown] = new KeyEventHandler(LayoutView_KeyDown);

                spi = LayoutView;
            }
            else
            {
                spi = Activator.CreateInstance(smartPartInfoType) as ISmartPartInfo;
            }

            //spi.Description = Properties.Resources.FindCustomerResultsViewDescription;
            spi.Title = "О программе";

            return spi;
        }

        #endregion
        
        private void siteLink_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            System.Diagnostics.Process.Start("http://www.chumak.yaroslavl.ru");
        }

        private void site2Link_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            System.Diagnostics.Process.Start("http://www.acot-centr.ru/");            
        }

        private void mailtoLink_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            System.Diagnostics.Process.Start("mailto:chumak@yaroslavl.ru");
        }

        private void seeLicenseLinkLabel_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            System.Diagnostics.Process.Start("http://chumak.yaroslavl.ru/Public/svidet.htm");
        }

        #region Assembly Attribute Accessors

        public string AssemblyTitle
        {
            get
            {
                // Get all Title attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute), false);
                // If there is at least one Title attribute
                if (attributes.Length > 0)
                {
                    // Select the first one
                    AssemblyTitleAttribute titleAttribute = (AssemblyTitleAttribute)attributes[0];
                    // If it is not an empty string, return it
                    if (titleAttribute.Title != "")
                        return titleAttribute.Title;
                }
                // If there was no Title attribute, or if the Title attribute was the empty string, return the .exe name
                return System.IO.Path.GetFileNameWithoutExtension(Assembly.GetExecutingAssembly().CodeBase);
            }
        }

        public string AssemblyVersion
        {
            get
            {
                return Assembly.GetExecutingAssembly().GetName().Version.ToString();
            }
        }

        public string AssemblyDescription
        {
            get
            {
                // Get all Description attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyDescriptionAttribute), false);
                // If there aren't any Description attributes, return an empty string
                if (attributes.Length == 0)
                    return "";
                // If there is a Description attribute, return its value
                return ((AssemblyDescriptionAttribute)attributes[0]).Description;
            }
        }

        public string AssemblyProduct
        {
            get
            {
                // Get all Product attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyProductAttribute), false);
                // If there aren't any Product attributes, return an empty string
                if (attributes.Length == 0)
                    return "";
                // If there is a Product attribute, return its value
                return ((AssemblyProductAttribute)attributes[0]).Product;
            }
        }

        public string AssemblyCopyright
        {
            get
            {
                // Get all Copyright attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyCopyrightAttribute), false);
                // If there aren't any Copyright attributes, return an empty string
                if (attributes.Length == 0)
                    return "";
                // If there is a Copyright attribute, return its value
                return ((AssemblyCopyrightAttribute)attributes[0]).Copyright;
            }
        }

        public string AssemblyCompany
        {
            get
            {
                // Get all Company attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyCompanyAttribute), false);
                // If there aren't any Company attributes, return an empty string
                if (attributes.Length == 0)
                    return "";
                // If there is a Company attribute, return its value
                return ((AssemblyCompanyAttribute)attributes[0]).Company;
            }
        }         
        #endregion

        #region ILayoutView Members

        public Label VersionLabel
        {
            get { return versionLabel; }            
        }

        public Form ParentFm
        {
            get { return this.ParentForm; }
        }
        #endregion      

        private void LayoutView_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Escape)
                _presenter.OnCloseView();
        }
    }
}
