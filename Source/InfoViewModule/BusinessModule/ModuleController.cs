//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Business Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-280-Automation%20Add%20Business%20Module.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using ACOT.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using System.IO;
using ACOT.Infrastructure.Interface.Constants;
using ACOT.Infrastructure.Interface.BusinessEntities;
using ACOT.InfoViewModule.Views;

namespace ACOT.InfoViewModule
{
    public class ModuleController : WorkItemController
    {
        private LayoutView workItem;

        public override void Run()
        {
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in 
            //		WorkItem.Services collection or see ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm            
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-100-Showing%20UIElements.htm
            // Пpосмотp ДАТ и РАЗМЕРОВ программных файлов в варианте WINDOWS
            //AddNewParentToolStripMenuElement("&Пpосмотp ДАТ и РАЗМЕРОВ программных файлов в варианте WINDOWS", UIExtensionSiteNames.InfoViewMenuItem, "", "Пpосмотp ДАТ и РАЗМЕРОВ программных файлов в варианте WINDOWS", UIExtensionSiteNames.DifferentMenuItem);

            //AddNewToolStripMenuElement("Пpосмотp ДАТ и РАЗМЕРОВ программ EXE", CommandNames.InfoViewExeShow, CommandNames.InfoViewExeShow, "", UIExtensionSiteNames.InfoViewMenuItem);
            //AddNewToolStripMenuElement("Пpосмотp ДАТ и РАЗМЕРОВ программ RES", CommandNames.InfoViewResShow, CommandNames.InfoViewResShow, "", UIExtensionSiteNames.InfoViewMenuItem);
            //AddNewToolStripMenuElement("Пpосмотp ДАТ и РАЗМЕРОВ программ HLP", CommandNames.InfoViewHlpShow, CommandNames.InfoViewHlpShow, "", UIExtensionSiteNames.InfoViewMenuItem);
            //AddNewToolStripMenuElement("Просмотр ДАТ и РАЗМЕРОВ наборов текущей организации", CommandNames.InfoViewCurShow, CommandNames.InfoViewCurShow, "", UIExtensionSiteNames.InfoViewMenuItem);
            //AddNewToolStripMenuElement("Просмотр ДАТ и РАЗМЕРОВ *.???", CommandNames.InfoViewAllShow, CommandNames.InfoViewAllShow, "", UIExtensionSiteNames.InfoViewMenuItem);
        }

        /// <summary>
        /// Метод доавляет новый родительский элемент в главное меню программы
        /// </summary>
        /// <param name="_text">Заголовок</param>
        /// <param name="_id">Код</param>
        /// <param name="_commandName">Имя команды - вероятно не используется</param>
        /// <param name="_toolTipText">Подсказка</param>
        /// <param name="_UIExtensionSite">Место а меню, где будет помещен родительский элемент</param>
        //private void AddNewParentToolStripMenuElement(string _text, string _id, string _commandName, string _toolTipText, string _UIExtensionSite)
        //{
        //    ToolStripMenuItemElement newElem = new ToolStripMenuItemElement(_text);
        //    newElem.ID = _id;
        //    newElem.CommandName = _commandName;
        //    newElem.ToolTipText = _toolTipText;
        //    if (!WorkItem.RootWorkItem.UIExtensionSites.Contains(_UIExtensionSite))
        //    {
        //        ToolStripMenuItemElement parentElem = new ToolStripMenuItemElement(_UIExtensionSite);
        //        parentElem.ID = _UIExtensionSite;
        //        WorkItem.UIExtensionSites[UIExtensionSiteNames.MainMenu].Add(parentElem);
        //        WorkItem.UIExtensionSites.RegisterSite(parentElem.ID, parentElem.DropDownItems);
        //    }
        //    WorkItem.UIExtensionSites[_UIExtensionSite].Add(newElem);
        //    WorkItem.UIExtensionSites.RegisterSite(newElem.ID, newElem.DropDownItems);
        //}

        /// <summary>
        /// Метод доавляет новый элемент в главное меню программы
        /// </summary>
        /// <param name="_text">Заголовок</param>
        /// <param name="_id">Код</param>
        /// <param name="_commandName">Имя команды</param>
        /// <param name="_toolTipText">Подсказка</param>
        /// <param name="_UIExtensionSite">Место а меню, где будет помещен элемент</param>
        //private void AddNewToolStripMenuElement(string _text, string _id, string _commandName, string _toolTipText, string _UIExtensionSite)
        //{
        //    ToolStripMenuItemElement newElem = new ToolStripMenuItemElement(_text);
        //    newElem.ID = _id;
        //    newElem.CommandName = _commandName;
        //    newElem.ToolTipText = _toolTipText;
        //    WorkItem.UIExtensionSites[_UIExtensionSite].Add(newElem);
        //    WorkItem.Commands[_commandName].AddInvoker(newElem, "Click");
        //}

        private void ExtendToolStrip()
        {
            //TODO: add new items to the ToolStrip in the Shell. See the UIExtensionSites collection in the WorkItem. 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-100-Showing%20UIElements.htm
        }

        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.scsf.2006jun/SCSF/html/03-300-Adding%20a%20View.htm
        }

        //TODO: Add CommandHandlers and/or Event Subscriptions
        //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-110-Registering%20Commands.htm
        //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-080-Publishing%20and%20Subscribing%20to%20Events.htm        

        [EventSubscription(EventTopicNames.InfoViewShow, ThreadOption.UserInterface)]
        public void InfoViewClickHandler(object sender, EventArgs<string> e)
        {
            const string workItemID = "InfoView";            
            if (WorkItem.Items.Contains(workItemID))
                workItem = (LayoutView)WorkItem.Items[workItemID];
            else
            {
                workItem = WorkItem.Items.AddNew<LayoutView>(workItemID);                
            }
            try
            {                
                switch (e.Data)
                {
                    case "exe": workItem.FilterTool.SelectedIndex = 0; break;
                    case "res": workItem.FilterTool.SelectedIndex = 1; break;
                    case "hlp": workItem.FilterTool.SelectedIndex = 2; break;
                    case "org": workItem.FilterTool.SelectedIndex = 3; break;
                    case "*.*": workItem.FilterTool.SelectedIndex = 4; break; 
                }
                workItem.Dock = DockStyle.Fill;                
                WorkItem.Workspaces[WorkspaceNames.MdiWindows].Show(workItem);
                workItem.ParentForm.FormClosing += new FormClosingEventHandler(ParentForm_FormClosing);            
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public void ParentForm_FormClosing(object sender, EventArgs e)
        {
            ACOT.InfoViewModule.Properties.Settings.Default.Location = workItem.ParentForm.Location;
            ACOT.InfoViewModule.Properties.Settings.Default.Size = workItem.ParentForm.Size;
            ACOT.InfoViewModule.Properties.Settings.Default.Save();


            this.WorkItem.Items.Remove(workItem);
                       
            if (workItem is IDisposable)
                ((IDisposable)workItem).Dispose();

            this.WorkItem.RootWorkItem.Items.Remove(this);
        }

        //[EventPublication(EventTopicNames.InfoViewLoad, PublicationScope.Global)]
        //public event EventHandler<EventArgs<int>> OnInfoViewLoad;

    }
}
